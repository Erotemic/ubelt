# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# References:
#     # how to setup multiple python versions
#     https://stackoverflow.com/questions/948354/default-behavior-of-git-push-without-a-branch-specified
#     https://github.com/adambrenecki/virtualfish/blob/aa3d6271bcb86ad27b6d24f96b5bd386d176f588/.circleci/config.yml
#
#     # Multiple files for a checksum
#     https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667/2
#     
#     # Auto Cancel Redundant Builds
#     https://circleci.com/docs/2.0/skip-build/#steps-to-enable-auto-cancel-for-pipelines-triggered-by-pushes-to-github-or-the-api
#     https://app.circleci.com/settings/project/github/Erotemic/xdoctest/advanced?return-to=https%3A%2F%2Fapp.circleci.com%2Fpipelines%2Fgithub%2FErotemic%2Fxdoctest


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
__doc__: &__doc__
    - | 

        __doc__="""

        ============
        CIRCLECI INSTRUCTIONS
        ============

        This file was designed to be used as a template. You can adapt it to
        new projects with a few simple changes.  Namely perform the following
        search and replaces.

        ```bash
        cat .circleci/config.yml | \
            sed 's|GITHUB_USER|Erotemic|g' | \
            sed 's|PYPKG|xdoctest|g' | \
            sed 's|GPG_ID|travis-ci-Erotemic|g' | \
            sed 's|CIRCLE_CI_SECRET|CIRCLE_CI_SECRET|g' | \
        tee /tmp/repl && colordiff .circleci/config.yml /tmp/repl
        # overwrite if you like the diff
        cp /tmp/repl .circleci/config.yml
        ```

        To use this script you need the following configurations on your
        CircleCI account.

        NOTES
        -----

        * This script will require matainence for new releases of Python
        

        CIRCLECI SECRETS  # NOQA
        --------------


        Almost all of the stages in this pipeline can be performed on a local
        machine (making it much easier to debug) as well as the circleci-ci
        machine. However, there are a handeful of required environment
        variables which will contain sensitive information. These variables are

        * TWINE_USERNAME - this is your pypi username
            twine info is only needed if you want to automatically publish to pypi

        * TWINE_PASSWORD - this is your pypi password 

        * CIRCLE_CI_SECRET - We will use this as a secret key to encrypt/decrypt gpg secrets 
            This is only needed if you want to automatically sign published
            wheels with a gpg key.

        * GITHUB_PUSH_TOKEN - 
            This is only needed if you want to automatically git-tag release branches.

            To make a API token go to:
                https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token

        Instructions:

            Browse to: 
                https://app.circleci.com/settings/project/github/Erotemic/ubelt/environment-variables

            Do whatever you need to locally access the values of these variables

            echo $TWINE_USERNAME
            echo $GITHUB_PUSH_TOKEN
            echo $CIRCLE_CI_SECRET
            echo $TWINE_PASSWORD

            For each one, click "Add Environment Variable" and enter the name
            and value. Unfortunately this is a manual process.

        WARNING: Ensure that your CircleCI project settings do not allow Forks
            to view environment variables.

        TODO: Can you protect branches on CircleCI, is that the default?

            - ANS: CircleCI provides contexts: https://circleci.com/docs/2.0/contexts/

        TODO: Look into secrethub

        WARNING: If an untrusted actor gains the ability to write to a
        protected branch, then they will be able to exfiltrate your secrets.

        WARNING: These variables contain secret information. Ensure that these
        the protected and masked settings are enabled when you create them.


        ENCRYPTING GPG SECRETS
        ----------------------

        The following script demonstrates how to securely encrypt a secret GPG key. It is assumed that you have 
        a file secret_loader.sh that looks like this

        ```bash
            source secretfile
        ```

        and then a secretfile that looks like this

        ```bash
            #!/bin/bash
            echo /some/secret/file 

            export TWINE_USERNAME=<pypi-username>
            export TWINE_PASSWORD=<pypi-password>
            export CIRCLE_CI_SECRET="<a-very-long-secret-string>"
            export GITHUB_PUSH_TOKEN='git-push-token:<token-password>'
        ```

        You should also make a secret_unloader.sh that points to a script that
        unloads these secret variables from the environment.

        Given this file-structure setup, you can then run the following
        commands verbatim. Alternatively just populate the environment
        variables and run line-by-line without creating the secret
        loader/unloader scripts.
        
        ```bash
        # THIS IS NOT EXECUTE ON THE CI, THIS IS FOR DEVELOPER REFERENCE
        # ON HOW THE ENCRYPTED GPG KEYS ARE SETUP.
        
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $CIRCLE_CI_SECRET
        echo $TWINE_USERNAME

        # ADD RELEVANT VARIABLES TO CIRCLECI SECRET VARIABLES
        # https://app.circleci.com/settings/project/github/Erotemic/xdoctest/environment-variables
        # See previous CIRCLE_CI section for more details

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        GPG_KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "GPG_KEYID = $GPG_KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $GPG_KEYID > dev/ci_secret_gpg_key.pgp
        gpg --armor --export $GPG_KEYID > dev/ci_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with CI secret
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/ci_public_gpg_key.pgp > dev/ci_public_gpg_key.pgp.enc
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/ci_secret_gpg_key.pgp > dev/ci_secret_gpg_key.pgp.enc
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $GPG_KEYID > dev/public_gpg_key

        # Test decrpyt
        cat dev/public_gpg_key
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc 
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc 
        GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc 

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key
        ```


        TEST GITHUB_PUSH_TOKEN 
        -------------------

        The following script tests if your GITHUB_PUSH_TOKEN environment variable is correctly setup.

        ```bash
        docker run -it ubuntu
        apt update -y && apt install git -y
        git clone https://github.com/Erotemic/xdoctest.git
        cd xdoctest
        # do sed twice to handle the case of https clone with and without a read token
        git config user.email "ci@circleci.com"
        git config user.name "CircleCI-User"
        URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
        echo "URL_HOST = $URL_HOST"
        git tag "test-tag4"
        git push --tags "https://${GITHUB_PUSH_TOKEN}@${URL_HOST}"

        # Cleanup after you verify the tags shows up on the remote
        git push --delete origin test-tag4
        git tag --delete test-tag4
        ```


        """ # "  # hack for vim yml syntax highlighter


version: 2
workflows:
  version: 2
  test:
    jobs:
      #- test_full/cp3_10-3_10-linux  # numpy isnt out for 3_10 yet
      - test_full/cp39-39-linux
      - test_full/cp38-38-linux
      - test_full/cp37-37m-linux
      - test_full/cp36-36m-linux
      - test_full/cp35-35m-linux
      - test_full/cp34-34m-linux
      - test_full/cp27-27mu-linux

      - test_minimal/cp3_10-3_10-linux
      - test_minimal/cp39-39-linux
      - test_minimal/cp38-38-linux
      - test_minimal/cp37-37m-linux
      - test_minimal/cp36-36m-linux
      - test_minimal/cp35-35m-linux
      - test_minimal/cp34-34m-linux
      - test_minimal/cp27-27mu-linux

      - test_minimal/pypy3
      - test_full/pypy3

      - test_full/pypy3
      - gpgsign/cp38-38-linux

      #- gpgsign/cp38-38-linux:
      #    filters:
      #      branches:
      #        only: 
      #           - master
      #           - release

      - deploy/cp38-38-linux:
          filters:
            branches:
              only: 
                 - release

jobs:

  ###########
  # TEMPLATES
  ###########
  #
  .common_template: &common_template
    environment:
      # Setting the python executable environ allows template reuse for pypy
      - PYTHON_EXE: python
    docker:
      - image: circleci/python
    steps:
      - checkout
    #working_directory: ~/{{ .Environment.CIRCLE_JOB }}

  .test_minimal_template: &test_minimal_template  
    <<: 
        - *common_template
    steps:
      - checkout
      # ### INITIALIZE AND CACHE REQUIREMENTS ###
      - restore_cache:
          # NOTE: cache keys should contain the Python Version
          keys:
          - v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: install dependencies
          command: |
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            # The "minimal" tests install barebones requirements
            pip install -r requirements/tests.txt
            pip install -r requirements/runtime.txt 
            pip install .
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ .Environment.CIRCLE_JOB }}
      # ### RUN TESTS ###
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            $PYTHON_EXE run_tests.py
      - store_artifacts:
          path: test-reports
          destination: test-reports


  .test_full_template: &test_full_template  
    <<: 
        - *common_template
    steps:
      - checkout
      # ### INITIALIZE AND CACHE REQUIREMENTS ###
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/optional.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: install dependencies
          command: |
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            # The "full" dependency install
            pip install -r requirements.txt
            pip install .
      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/optional.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ .Environment.CIRCLE_JOB }}
      # ### RUN TESTS ###
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            $PYTHON_EXE run_tests.py --network
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

  .gpgsign_template: &gpgsign_template  
    <<: 
        - *common_template
    steps:
      - checkout
      - run:
          name: build_gpg_deps
          command: |
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            export GPG_EXECUTABLE=gpg
            export GPG_KEYID=$(cat dev/public_gpg_key)
            echo "GPG_KEYID = $GPG_KEYID"
            echo "-- QUERY GPG VERSION..."
            $GPG_EXECUTABLE --version
            echo "-- QUERY OPENSSL VERSION..."
            openssl version
            echo "-- QUERY GPG KEYS (done twice as a workaround)"
            $GPG_EXECUTABLE --list-keys || $GPG_EXECUTABLE --list-keys
            echo "-- QUERY GPG KEYS (done twice as a workaround)"
            $GPG_EXECUTABLE --list-keys || $GPG_EXECUTABLE --list-keys
            echo "-- Decrypt and import GPG Keys / trust"
            # note CIRCLE_CI_SECRET is a protected variables only available on master and release branch
            echo "CIRCLE_CI_SECRET = $CIRCLE_CI_SECRET"
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
            $GPG_EXECUTABLE --list-keys  || echo "first one fails for some reason"
            $GPG_EXECUTABLE --list-keys  
            # The publish script only builds wheels and does gpg signing if DO_UPLOAD is no
            pip install requests[security] twine wheel
            echo "Execute the publish script in dry mode"
            MB_PYTHON_TAG=$MB_PYTHON_TAG DO_GPG=True GPG_KEYID=$GPG_KEYID TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE CURRENT_BRANCH=release DEPLOY_BRANCH=release DO_UPLOAD=False DO_TAG=False ./publish.sh 
      - store_artifacts:
          path: dist
          destination: dist


  .deploy_template: &deploy_template  
    <<: 
        - *common_template
    steps:
      - checkout
      - run:
          name: deploy
          command: |
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            export GPG_EXECUTABLE=gpg
            export GPG_KEYID=$(cat dev/public_gpg_key)
            # Decrypt and import GPG Keys / trust
            # note CIRCLE_CI_SECRET is a protected variables only available on master and release branch
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
            GLKWS=$CIRCLE_CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
            $GPG_EXECUTABLE --list-keys  || echo "first one fails for some reason"
            $GPG_EXECUTABLE --list-keys  
            # Install twine
            pip install six pyopenssl ndg-httpsclient pyasn1 -U 
            pip install requests[security] twine wheel
            # Execute the publish script for real this time
            MB_PYTHON_TAG=$MB_PYTHON_TAG DO_GPG=True GPG_KEYID=$GPG_KEYID TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE CURRENT_BRANCH=release DEPLOY_BRANCH=release DO_UPLOAD=True DO_TAG=False ./publish.sh 
            # Have the server git-tag the release and push the tags
            VERSION=$(python -c "import setup; print(setup.VERSION)")
            # do sed twice to handle the case of https clone with and without a read token
            URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
            echo "URL_HOST = $URL_HOST"
            # A git config user name and email is required. Set if needed.
            if [[ "$(git config user.email)" == "" ]]; then
                git config user.email "ci@circleci.com"
                git config user.name "CircleCI"
            fi
            if [ $(git tag -l "$VERSION") ]; then
                echo "Tag already exists"
            else
                git tag $VERSION -m "tarball tag $VERSION"
                git push --tags "https://${GIT_PUSH_TOKEN}@${URL_HOST}"
            fi


  ###################################
  ### INHERIT FROM BASE TEMPLATES ###
  ###################################

  # Define tests fo the other python verisons using the "test3.6" template
  # and indicating what needs to be modified.
  #
  # All we need to do is change the base docker image so python is the
  # version we want we can reuse everything else from the template
  
  test_full/cp3_10-3_10-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.10-rc
  
  test_full/cp39-39-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.9
  
  test_full/cp38-38-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.8
  
  test_full/cp37-37m-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.7

  test_full/cp36-36m-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.5

  test_full/cp35-35m-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.5

  test_full/cp34-34m-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:3.4

  test_full/cp27-27mu-linux:
    <<: *test_full_template
    docker:
      - image: circleci/python:2.7

  # ------------
  
  test_minimal/cp3_10-3_10-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.10-rc
  
  test_minimal/cp39-39-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.9
  
  test_minimal/cp38-38-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.8

  test_minimal/cp37-37m-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.7

  test_minimal/cp36-36m-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.6

  test_minimal/cp35-35m-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.5

  test_minimal/cp34-34m-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:3.4

  test_minimal/cp27-27mu-linux:
    <<: *test_minimal_template
    docker:
      - image: circleci/python:2.7

  # --- pypy ----

  test_minimal/pypy3:
    <<: *test_minimal_template
    docker:
      - image: pypy:3
    environment:
      - PYTHON_EXE: pypy3

  test_full/pypy3:
    <<: *test_full_template
    docker:
      - image: pypy:3
    environment:
      - PYTHON_EXE: pypy3

 
  # -- gpgsign + deploy
  
  gpgsign/cp38-38-linux:
    <<: *gpgsign_template
    docker:
      - image: circleci/python:3.8


  deploy/cp38-38-linux:
    <<: *deploy_template
    docker:
      - image: circleci/python:3.8

        
  __doc__:
    docker:
      - image: pypy:3
    working_directory: ~/dev-only-not-a-real-job
    steps:
      - | 
        __heredoc__=" 
        docker run -v $(pwd):/io -it pypy:3 bash

        cd /io

        pypy3 -m venv venv 
        . venv/bin/activate
        # The "minimal" tests install barebones requirements
        pip install -r requirements/tests.txt
        pip install -r requirements/runtime.txt 
        pip install -e .

        ./run_doctests.sh || echo "pypy failed, but this is allowed"
        ./run_tests.sh || echo "pypy failed, but this is allowed"
        "
